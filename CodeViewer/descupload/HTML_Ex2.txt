#### **Overview**
This example demonstrates context stacking, transformations and path drawing. The example also shows how animation can be achieved using a timer.

#### **Context stacking**
It is often useful to be able to store the current state of the context (transformations, colors, etc.) and to be able to restore this state at a later time. This can be done with the save and restore methods.
**Save and Restore Example:**
~~~
context.fillStyle="#F00";
context.save();
context.translate(100,0);
context.fillStyle="#0F0";
context.fillRect(0,0,100,100);
context.restore();
context.fillRect(0,0,100,100);
~~~
The first fillRect statement will draw a green rectangle at position 100,0 (x,y) and the second fillRect statement will draw a red rectangle at position 0,0. 

Context states are stored in a stack. You can store as many states as you like but you have to step back one state at a time. Each call of the restore method will revert the context to the latest previously saved state.
**State Stacking Example:**
~~~
1.  context.fillStyle="#00F";
2.  context.save();
3.  context.fillStyle="#F00";
4.  context.save();
5.  context.translate(100,0);
6.  context.fillStyle="#0F0";
7.  context.fillRect(0,0,100,100);
8.  context.restore();
9.  context.fillRect(0,0,100,100);
10. context.restore();
11. context.fillRect(0,100,100,100);
~~~
The first context.restore statement at line 8 (blue) above will restore the context to the state as saved by the second context.save statement at line 4 (blue) above. The example code will therefore draw a blue rectangle at the last fillRect statement at line 11 (red) above since the second call of the restore method at line 8 (red) above will restore the context to the state as saved at line 2 above.

#### **Transformations**
There are three basic transformations that is used in this example. These are translate, scale and rotate. All transformations transforms the drawing context in some manner. 
Translate moves the origin to a given position:
**Translate Example:**
~~~
context.translate(100,100);
context.fillRect(0,0,50,50);
~~~
This will move the origin to position 100,100 (x,y) and hence the rectangle will be drawn relative to this new origin, i.e. the rectangle is drawn at position 100,100 (x,y) relative to the upper left corner of the canvas. 

The scale method changes the scale of the whole context:
**Scale Example:**
~~~
context.scale(1.5,1.5);
context.fillRect(0,0,50,50);
~~~
This will make the rectangle 50% larger when drawn compared to the original scaling. Scaling can be done on both width and height separately. Try changing the scale in the demo of this example. 

The rotate method rotates the whole drawing context:
**Rotate Example:**
~~~
contex.rotate(Math.PI/4);
context.fillRect(-25,-25,50,50);
~~~
This rotates the rectangle 45 degrees clockwise. Note: the rotation occurs around the origin. In this case we've drawn the rectangle in a way that puts the middle of the rectangle on the origin. 

The rotate method sets the rotation angle in radians. The following function can be used to conviniently convert degrees to radians:
**Converting degrees to radians:**
~~~
function degreesToRadians(degrees)
{
     return Math.PI*degrees/180;
}
~~~

There are also other types of transformations that can be performed on the drawing context, e.g. shear and mirror transforms or a custom transformation defined by a 3x3 transformation matrix. 

Read more about transformations in the course literature in chapter 21.4.4 at page 638.

#### **Path drawing**
It is possible to draw any custom shape with the path drawing methods. All path are begun the beginPath method. The endPath method may be used to close the path if so whished.
**Path Example:**
~~~
context.beginPath();
context.moveTo(100,100);
context.lineTo(200,100);
context.stroke();
~~~
The code above will draw a line from position 100,100 (x,y) to position 200,100 (x,y). The stroke method draws a line along the specified path.

The following code uses curves (both quadratic and cubic) to draw a fish-like figure filled with a blue color and outlined by a thick black line:
**Path Example:**
~~~
context.beginPath();
context.moveTo(96,105);
context.bezierCurveTo(200, 200, 150, 10, 400, 10);
context.quadraticCurveTo(440, 250, 80, 120);
context.lineTo(34,130);
context.quadraticCurveTo(100,100,84,50);
context.lineWidth = 5;
context.strokeStyle = 'black';
context.fillStyle = 'blue';
context.closePath();
context.fill();
context.stroke();
~~~
**Note:** Changing the order of the fill and stroke methods will give a slightly different result. 

Lines 110-114 in the example code shows how circles may be drawn using a path. 

Read more about drawing paths in the course literature in chapter 21.4.5 at page 643.
